using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class AlarmClock : MonoBehaviour
{
    public AudioClip alarmSound; // Sound to play when the alarm is triggered
    public float noiseIncreaseAmount; // Amount of noise generated by hitting the alarm clock

    public SpriteRenderer spriteRenderer;
    public Sprite glowSprite;
    public float glowIntensity = 0.5f;

    private Sprite originalSprite;
    private Color originalColor;

    private AudioSource audioSource;
    private bool isAlarmActive = false;

    private NoiseMeterUI noiseMeterUI;
    private EnemyAI enemyAI;

    private void Start()
    {
        audioSource = GetComponent<AudioSource>();
        noiseMeterUI = FindObjectOfType<NoiseMeterUI>();
        enemyAI = FindObjectOfType<EnemyAI>();
        if (audioSource == null)
        {
            audioSource = gameObject.AddComponent<AudioSource>();
        }

        audioSource.clip = alarmSound;
        audioSource.loop = true;
        audioSource.playOnAwake = false;

        originalSprite = spriteRenderer.sprite;
        originalColor = spriteRenderer.color;
    }

    private void Update()
    {
        if (isAlarmActive && !enemyAI.isPlayerDetected)
        {
            noiseMeterUI.SetNoiseLevel(noiseIncreaseAmount);
            enemyAI.activatedAlarmClock = this;
            enemyAI.isMovingToAlarm = true;
        }
    }

    private void OnTriggerStay2D(Collider2D collision)
    {
        if (!isAlarmActive)
        {
            if (collision.gameObject.CompareTag("Player"))
            {
                SetGlowEffect(true);
                noiseMeterUI.SetNoiseLevel(noiseIncreaseAmount);
                StartCoroutine(TriggerAlarm());
            }
        }     
    }

    private void SetGlowEffect(bool enabled)
    {
        if (enabled)
        {
            spriteRenderer.sprite = glowSprite;
            spriteRenderer.color = new Color(originalColor.r, originalColor.g, originalColor.b, glowIntensity);
        }
        else
        {
            spriteRenderer.sprite = originalSprite;
            spriteRenderer.color = originalColor;
        }
    }

    public IEnumerator TriggerAlarm()
    {
        if (!isAlarmActive && alarmSound != null)
        {
            isAlarmActive = true;
            audioSource.Play();
        }

        yield return new WaitForSeconds(audioSource.clip.length);

        if (isAlarmActive)
        {
            isAlarmActive = false;
            audioSource.Stop();
            noiseMeterUI.ResetNoiseLevel();
            SetGlowEffect(false);
        }
        StopCoroutine(TriggerAlarm());
    }
}